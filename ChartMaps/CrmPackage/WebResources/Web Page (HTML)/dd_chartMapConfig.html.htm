
<html>
	<head>
		<title>Chart Map Configuration</title>

        <script src="ClientGlobalContext.js.aspx" type="text/javascript" ></script>
        <script type="text/javascript">

            function onSaveClick() {
                var configFile = "dd_chartMapConfig.xml";
                var configFileGUID = "";
                var bingkey = document.getElementById("bingkey");

                var xmlconfig = "<?xml version='1.0' encoding='UTF-8' ?><chartmapconfig><bingkey>" + bingkey.toString() + "</bingkey></chartmapconfig>";
                //var enc = encode64(xmlconfig);

                //SDK.SAMPLES.UpdateWebResourceRequest(guidWebResource, enc);
                //SDK.SAMPLES.PublishWebResourceRequest(guidWebResource);
            }

            function retrieveConfigFile(successCallback) {
                var type = "webresource"; //entity logical name
                var optionset = ""; //query string

                var req = new XMLHttpRequest();
                req.open("GET", GetGlobalContext().getServerUrl() + "/XRMServices/2011/OrganizationData.svc/" + type + "Set" + optionsString, true);
                req.setRequestHeader("Accept", "application/json");
                req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                req.onreadystatechange = function () {
                    if (this.readyState == 4 /* complete */) {
                        req.onreadystatechange = null;
                        if (this.status == 200) {
                            var returned = JSON.parse(this.responseText, dateReviver).d;
                            successCallback(returned.results);
                           // if (returned.__next != null) {
                             //   var queryOptions = returned.__next.substring((SDK.REST._ODataPath() + type + "Set").length);
                               // SDK.REST.retrieveMultipleRecords(type, queryOptions, successCallback, errorCallback, OnComplete);
                            //}
                            //else { OnComplete(); }
                        }
                        else {
                            errorCallback(errorHandler(this));
                        }
                    }
                };
                req.send();
            }

            function updateConfigFile(id, object, successCallback) {
                var type = "webresource";

                req.open("POST", encodeURI(GetGlobalContext().getServerUrl() + "/XRMServices/2011/OrganizationData.svc/" + type + "Set(guid'" + id + "')"), true);
                req.setRequestHeader("Accept", "application/json");
                req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                req.setRequestHeader("X-HTTP-Method", "MERGE");
                req.onreadystatechange = function () {
                    if (this.readyState == 4 /* complete */) {
                        req.onreadystatechange = null;
                        if (this.status == 204 || this.status == 1223) {
                            successCallback();
                        }
                        else {
                            errorCallback(errorHandler(this));
                        }
                    }
                };
                req.send(JSON.stringify(object));
            }

            function errorHandler(req) {

                if (req.status == 12029)
                { return new Error("The attempt to connect to the server failed."); }
                if (req.status == 12007)
                { return new Error("The server name could not be resolved."); }
                var errorText;
                try
                { errorText = JSON.parse(req.responseText).error.message.value; }
                catch (e)
                { errorText = req.responseText }

                return new Error("Error : " +
                      req.status + ": " +
                      req.statusText + ": " + errorText);
            }

            function dateReviver(key, value) {
                var a;
                if (typeof value === 'string') {
                    a = /Date\(([-+]?\d+)\)/.exec(value);
                    if (a) {
                        return new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10));
                    }
                }
                return value;
            };


            function encode64(input) {
                var keyStr = "ABCDEFGHIJKLMNOP" +
                           "QRSTUVWXYZabcdef" +
                           "ghijklmnopqrstuv" +
                           "wxyz0123456789+/" +
                           "=";

                //input = escape(input);
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                do {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);

                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;

                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }

                    output = output +
                       keyStr.charAt(enc1) +
                       keyStr.charAt(enc2) +
                       keyStr.charAt(enc3) +
                       keyStr.charAt(enc4);
                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";
                } while (i < input.length);

                return output;
            }

            function decode64(input) {
                var keyStr = "ABCDEFGHIJKLMNOP" +
                           "QRSTUVWXYZabcdef" +
                           "ghijklmnopqrstuv" +
                           "wxyz0123456789+/" +
                           "=";

                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
                var base64test = /[^A-Za-z0-9\+\/\=]/g;
                if (base64test.exec(input)) {
                    alert("There were invalid base64 characters in the input text.\n" +
                          "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                          "Expect errors in decoding.");
                }
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

                do {
                    enc1 = keyStr.indexOf(input.charAt(i++));
                    enc2 = keyStr.indexOf(input.charAt(i++));
                    enc3 = keyStr.indexOf(input.charAt(i++));
                    enc4 = keyStr.indexOf(input.charAt(i++));

                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;

                    output = output + String.fromCharCode(chr1);

                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }

                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";

                } while (i < input.length);

                return unescape(output);
            }

        </script>

	</head>
	<body>
        Enter your Bing Maps Key: <input id="bingkey" type="text" value="test">
        <input id="submit" type="button" value="Save" onClick="onSaveClick()"/>
	</body>
</html>